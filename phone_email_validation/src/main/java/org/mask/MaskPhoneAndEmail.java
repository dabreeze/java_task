package org.mask;import com.google.i18n.phonenumbers.NumberParseException;import com.google.i18n.phonenumbers.PhoneNumberUtil;import com.google.i18n.phonenumbers.Phonenumber;import java.util.regex.Pattern;public class MaskPhoneAndEmail {    private static final String REGEX = "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])";    /* Code by harrison twitter : _foreverchild     */        public static String maskPhoneString(String strText) throws Exception {            try {                validateString(strText);                if(!validatePhoneNumber(strText))throw new IllegalArgumentException();            }catch (NullPointerException e){                e.getMessage();            }catch (IllegalArgumentException e){                return "not a valid phone number";            }                try {                    int start = 3;                    int end = 9;                    int maskLength = end - start;                    maskString(strText,start,end,strText.length(),maskLength);                    return strText.substring(0, start)                            + "*".repeat(maskLength)                            + strText.substring(end);                }catch (NullPointerException e){                    return e.getMessage();                }        }        private static void validateString(String strText){            try {                if(strText==null)throw new IllegalArgumentException();                if(strText.length()<1)throw new IllegalArgumentException();            }catch (NullPointerException e){                System.err.println("Not a valid string");            }catch (IllegalArgumentException e){                System.err.println("Invalid string parameter");            }        }    private static boolean validatePhoneNumber (String str) {        PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();        Phonenumber.PhoneNumber thePhoneNumber = null;        try {            thePhoneNumber = phoneUtil.parse(str, "IN");            return phoneUtil.isValidNumber(thePhoneNumber);        } catch (NumberParseException e) {            System.err.println("Cannot parse the given string as phone number " + str);        }        return false;    }    private static boolean isValidEmail(String strText) {        if (strText == null)            return false;        Pattern pat = Pattern.compile(REGEX, Pattern.CASE_INSENSITIVE);        return pat.matcher(strText).matches();    }    private static void maskString(String strText,int start, int end, int stringLength, int maskLength) {        try {            if (stringLength % 2 == 0) {                maskLength = (Math.abs(stringLength / 2));                start = (maskLength / 2);                end = stringLength - (maskLength / 2);            }            if (stringLength % 2 == 1) {                maskLength = (Math.abs(stringLength / 2));                int adjuster = maskLength / 2;                start = (maskLength - adjuster);                end = start + maskLength;            }        } catch (NullPointerException e) {            System.err.println(e.getMessage());        }    }    public static String maskEmailString(String strText) throws Exception {        try {            validateString(strText);            if(!isValidEmail(strText))throw new IllegalArgumentException();        }catch (NullPointerException e){            e.getMessage();        }catch (IllegalArgumentException e){            return "invalid email";        }        try {            String[] firstIndexString = strText.split("@");            int stringLength =firstIndexString[0].length();            int start = 1;            int maskLength = stringLength/2;            int adjust = maskLength/2;            int stop = stringLength - adjust;            maskString(strText,start,stop,stringLength,maskLength);            return firstIndexString[0].substring(0, adjust)                    + "*".repeat(maskLength)                    + firstIndexString[0].substring(stop)                    + "@" + firstIndexString[1];            }catch (IllegalArgumentException e){                return "not a valid email";            }catch (StringIndexOutOfBoundsException e){                return "Invalid string parameter for email"+e.getMessage();            }        }        public static String maskAll(String data, String choice) throws Exception {            try {                return switch (choice.toUpperCase()) {                    case "EMAIL" -> maskEmailString(data);                    case "NUMBER" -> maskPhoneString(data);                    default -> "invalid";                };                }catch (NullPointerException e){                return new NullPointerException("Value cannot be null").getMessage() ;            }        }        public static void main(String[] args) throws Exception {            System.out.println(maskAll("+2348038784595","number"));            System.out.println(maskAll("harrisonforever@gmail.com", "email"));    }}